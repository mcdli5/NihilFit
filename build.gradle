buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        maven {
            name = 'sonatype'
            url = 'https://oss.sonatype.org/content/repositories/snapshots/'
        }
        jcenter()
        mavenCentral()
        mavenLocal()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
    }
}

plugins {
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id "io.freefair.lombok" version "5.0.1"
    id 'com.github.johnrengelman.shadow' version '5.2.0'
    id 'com.matthewprenger.cursegradle' version '1.4.0'
}

apply plugin: 'net.minecraftforge.gradle'

idea {
    module {
        downloadJavadoc = true
        downloadSources = true
    }
}

configurations {
    shade
}

sourceSets {
    main {
        resources {
            srcDirs += 'src/main/generated/resources'
            exclude '.cache'
        }
    }
}

// We use the version format MCVERSION-MAJOR.MINOR.PATCH
version = minecraftVersion + '-' + modVersion
group = modGroup
archivesBaseName = modFileName

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8'

minecraft {
    mappings channel: mcpMappingsChannel, version: mcpMappingsVersion
    // accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
            mods {
                nihilfit {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
            mods {
                nihilfit {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
            args '--mod', modId, '--all', '--output', file('src/main/generated/resources/'), '--existing', sourceSets.main.resources.srcDirs[0]

            environment 'target', 'fmluserdevdata'

            mods {
                nihilfit {
                    source sourceSets.main
                }
            }
        }
    }
}

repositories {
    maven { // Registrate & TOP
        url 'http://maven.tterrag.com/'
    }
    maven { // JEI
        name = 'Progwml6 maven'
        url = 'https://dvs1.progwml6.com/files/maven/'
    }
}

dependencies {
    minecraft 'net.minecraftforge:forge:' + minecraftVersion + '-' + forgeVersion

    // Registrate
    def registrate = "com.tterrag.registrate:Registrate:MC${registrateVersion}"
    implementation fg.deobf(registrate)
    shade registrate

    // Night Config Json
    compile "com.electronwill.night-config:toml:${nightConfigVersion}"

    // JEI
    // compileOnly fg.deobf("mezz.jei:jei-${jeiVersion}:api")
    runtimeOnly fg.deobf("mezz.jei:jei-${jeiVersion}")

    // TOP
    // compileOnly fg.deobf("mcjty.theoneprobe:TheOneProbe-${topVersion}:api")
    runtimeOnly fg.deobf("mcjty.theoneprobe:TheOneProbe-${topVersion}")
}

lombok {
    version = lombokVersion
    config['config.stopBubbling'] = 'true'
}

delombok {
    format = [
        'suppressWarnings': 'skip',
        'javaLangAsFQN': 'skip'
    ]
}

jar {
    manifest {
        attributes([
            'Specification-Title'     : modId,
            'Specification-Vendor'    : modGroup,
            'Specification-Version'   : '1.0', // We are version 1 of ourselves
            'Implementation-Title'    : project.name,
            'Implementation-Version'  : project.version,
            'Implementation-Vendor'   : modGroup,
            'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

processResources {
	inputs.property 'version', project.version

	from(sourceSets.main.resources.srcDirs) {
		include 'META-INF/mods.toml'
		expand 'version': project.version
	}
}

shadowJar {
    configurations = [project.configurations.shade]
    relocate 'com.tterrag.registrate', 'mcdli5.nihilfit.repack.registrate'
    minimize()
}

reobf {
    shadowJar {}
}

build.dependsOn shadowJar
reobfShadowJar.mustRunAfter shadowJar
build.dependsOn reobfShadowJar

def githubProperties = new Properties()
githubProperties.load(new FileInputStream(rootProject.file('github.properties')))

publish.dependsOn shadowJar
publishToMavenLocal.dependsOn shadowJar

publishing {
    repositories {
        maven {
            name = 'GitHubPackages'
            url = uri("https://maven.pkg.github.com/mcdli5/${modFileName}")
            credentials {
                username = githubProperties['gpr.usr']
                password = githubProperties['gpr.key']
            }
        }
    }

    // Fix POM for jar, it must inform that it dependes on Registrate
    publications {
        gpr(MavenPublication) {
            artifact jar
            artifact shadowJar
        }
    }
}

def curseProperties = new Properties()
curseProperties.load(new FileInputStream(rootProject.file('curse.properties')))

curseforge {
  apiKey = curseProperties['curse.key']
  project {
    id = curseProperties['curse.id']
    changelog = ''
    releaseType = modReleaseType
    addGameVersion minecraftVersion

    mainArtifact(shadowJar) {
      displayName = "${modDisplayName}: ${version}"
    }
  }
}
